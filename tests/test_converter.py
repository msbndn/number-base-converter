import unittest
from utils import clear_terminal
from converter import conversion_to_decimal
from converter import conversion_from_decimal
from converter import conversion

class TestCalculator(unittest.TestCase):
    def test_filter_expression(self):
        self.assertEqual(conversion_to_decimal('11111111', 2), "255")
        self.assertEqual(conversion_to_decimal('11111111', 3), "3280")
        self.assertEqual(conversion_to_decimal('11111111', 4), "21845")
        self.assertEqual(conversion_to_decimal('11111111', 5), "97656")
        self.assertEqual(conversion_to_decimal('11111111', 6), "335923")
        self.assertEqual(conversion_to_decimal('11111111', 7), "960800")
        self.assertEqual(conversion_to_decimal('11111111', 8), "2396745")
        self.assertEqual(conversion_to_decimal('11111111', 9), "5380840")
        self.assertEqual(conversion_to_decimal('11111111', 10), "11111111")
        self.assertEqual(conversion_to_decimal('11111111', 11), "21435888")
        self.assertEqual(conversion_to_decimal('11111111', 12), "39089245")
        self.assertEqual(conversion_to_decimal('11111111', 13), "67977560")
        self.assertEqual(conversion_to_decimal('11111111', 14), "113522235")
        self.assertEqual(conversion_to_decimal('11111111', 15), "183063616")
        self.assertEqual(conversion_to_decimal('11111111', 16), "286331153")
        self.assertEqual(conversion_to_decimal('11111111', 17), "435984840")
        self.assertEqual(conversion_to_decimal('11111111', 18), "648232975")
        self.assertEqual(conversion_to_decimal('11111111', 19), "943531280")
        self.assertEqual(conversion_to_decimal('11111111', 20), "1347368421")
        self.assertEqual(conversion_to_decimal('11111111', 21), "1891142968")
        self.assertEqual(conversion_to_decimal('11111111', 22), "2613136835")
        self.assertEqual(conversion_to_decimal('1111', 23), "12720")
        self.assertEqual(conversion_to_decimal('1111', 24), "14425")
        self.assertEqual(conversion_to_decimal('1111', 25), "16276")
        self.assertEqual(conversion_to_decimal('1111', 26), "18279")
        self.assertEqual(conversion_to_decimal('1111', 27), "20440")
        self.assertEqual(conversion_to_decimal('1111', 28), "22765")
        self.assertEqual(conversion_to_decimal('1111', 29), "25260")
        self.assertEqual(conversion_to_decimal('1111', 30), "27931")
        self.assertEqual(conversion_to_decimal('1111', 31), "30784")
        self.assertEqual(conversion_to_decimal('1111', 32), "33825")
        self.assertEqual(conversion_to_decimal('1111', 33), "37060")
        self.assertEqual(conversion_to_decimal('1111', 34), "40495")
        self.assertEqual(conversion_to_decimal('1111', 35), "44136")
        self.assertEqual(conversion_to_decimal('1111', 36), "47989")

        self.assertEqual(conversion_from_decimal("255", 2), '11111111')
        self.assertEqual(conversion_from_decimal("3280", 3), '11111111')
        self.assertEqual(conversion_from_decimal("21845", 4), '11111111')
        self.assertEqual(conversion_from_decimal("97656", 5), '11111111')
        self.assertEqual(conversion_from_decimal("335923", 6), '11111111')
        self.assertEqual(conversion_from_decimal("960800", 7), '11111111')
        self.assertEqual(conversion_from_decimal("2396745", 8), '11111111')
        self.assertEqual(conversion_from_decimal("5380840", 9), '11111111')
        self.assertEqual(conversion_from_decimal("11111111", 10), '11111111')
        self.assertEqual(conversion_from_decimal("21435888", 11), '11111111')
        self.assertEqual(conversion_from_decimal("39089245", 12), '11111111')
        self.assertEqual(conversion_from_decimal("67977560", 13), '11111111')
        self.assertEqual(conversion_from_decimal("113522235", 14), '11111111')
        self.assertEqual(conversion_from_decimal("183063616", 15), '11111111')
        self.assertEqual(conversion_from_decimal("286331153", 16), '11111111')
        self.assertEqual(conversion_from_decimal("435984840", 17), '11111111')
        self.assertEqual(conversion_from_decimal("648232975", 18), '11111111')
        self.assertEqual(conversion_from_decimal("943531280", 19), '11111111')
        self.assertEqual(conversion_from_decimal("1347368421", 20), '11111111')
        self.assertEqual(conversion_from_decimal("1891142968", 21), '11111111')
        self.assertEqual(conversion_from_decimal("2613136835", 22), '11111111')
        self.assertEqual(conversion_from_decimal("12720", 23), '1111')
        self.assertEqual(conversion_from_decimal("14425", 24), '1111')
        self.assertEqual(conversion_from_decimal("16276", 25), '1111')
        self.assertEqual(conversion_from_decimal("18279", 26), '1111')
        self.assertEqual(conversion_from_decimal("20440", 27), '1111')
        self.assertEqual(conversion_from_decimal("22765", 28), '1111')
        self.assertEqual(conversion_from_decimal("25260", 29), '1111')
        self.assertEqual(conversion_from_decimal("27931", 30), '1111')
        self.assertEqual(conversion_from_decimal("30784", 31), '1111')
        self.assertEqual(conversion_from_decimal("33825", 32), '1111')
        self.assertEqual(conversion_from_decimal("37060", 33), '1111')
        self.assertEqual(conversion_from_decimal("40495", 34), '1111')
        self.assertEqual(conversion_from_decimal("44136", 35), '1111')
        self.assertEqual(conversion_from_decimal("47989", 36), '1111')

        self.assertEqual(conversion_to_decimal('101.11', 2), "5.75")
        self.assertEqual(conversion_to_decimal('712.54', 8), "458.6875")
        self.assertEqual(conversion_to_decimal('A924B.BCD', 16), "692811.7375488281")

        self.assertEqual(conversion_from_decimal("49.32", 2), '110001.010100011110')
        self.assertEqual(conversion_from_decimal("98.12", 3), '10122.010020110221')
        self.assertEqual(conversion_from_decimal("0.1234", 8), '0.077134443505')
        self.assertEqual(conversion_from_decimal("12345.6789", 16), '3039.ADCC63F14120')
        self.assertEqual(conversion_from_decimal("5422.43", 24), '99M.A7G7G7G7G7G7')
        self.assertEqual(conversion_from_decimal("235231.00", 30), '8LB1')
        self.assertEqual(conversion_from_decimal("43.06", 36), '17.25RCYK5RCYK5')

        self.assertEqual(conversion('1111', 2, 36), 'F')
        self.assertEqual(conversion('210', 3, 35), 'L')
        self.assertEqual(conversion('1023', 4, 34), '27')
        self.assertEqual(conversion('4304321', 5, 33), '20HQ')
        self.assertEqual(conversion('4530453251', 6, 32), '1F98PV')
        self.assertEqual(conversion('012351262', 7, 31), '16K8H')
        self.assertEqual(conversion('2301571026712', 8, 30), '7E600GJG')
        self.assertEqual(conversion('012385167', 9, 29), '8H7I3')

if __name__ == '__main__':
    clear_terminal()
    unittest.main()